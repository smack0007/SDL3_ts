import { SRC_PATH, TMP_PATH } from "../shared/constants.ts";
import { ensureDirectory, listFiles, readTextFileLines } from "../shared/fs.ts";
import { basename, join, resolve } from "../shared/path.ts";
import { chdir, exec, exit } from "../shared/process.ts";

const EXCLUDE_HEADERS: string[] = [
  "SDL.h",
  "SDL_begin_code.h",
  "SDL_close_code.h",
  "SDL_oldnames.h",
  "SDL_test_harness.h",
] as const;

const EXCLUDE_ENUMS: string[] = [
  "SDL_ALTIVEC_INTRINSICS",
  "SDL_ANDROID_EXTERNAL_STORAGE_READ",
  "SDL_ANDROID_EXTERNAL_STORAGE_WRITE",
  "SDL_FILE",
  "SDL_LINE",
  "SDL_MAIN_USE_CALLBACKS",
  "SDL_NO_THREAD_SAFETY_ANALYSIS",
  "SDL_MEMORY_BARRIER_USES_FUNCTION",
  "SDL_PRINTF_FORMAT_STRING",
  "SDL_SCANF_FORMAT_STRING",
  "SDL_SCOPED_CAPABILITY",
  "SDL_REVISION",
];

interface HeaderFileData {
  enums: Array<{
    name: string;
    specifier: "f" | "s" | "u";
  }>;
}

let output = `#include <stdio.h>
#include <SDL3/SDL.h>
`;

function appendLine(line: string): void {
  output += line + "\n";
}

function appendPrintf(value: string = "", ...args: string[]): void {
  value = value
    .replaceAll("\n", "\\n")
    .replaceAll("\t", "\\t")
    .replaceAll('"', '\\"');

  if (args.length <= 0) {
    value = value.replaceAll("%", "%%");
  }

  let argsString = args.join(", ");

  if (argsString.length > 0) {
    argsString = ", " + argsString;
  }

  appendLine(`printf("${value}\\n"${argsString});`);
}

async function main(): Promise<void> {
  ensureDirectory(TMP_PATH);
  chdir(TMP_PATH);

  const headerData = await parseHeaderFiles();

  appendLine("int main() {");

  appendPrintf("//");
  appendPrintf(
    "// The file is generated by the codegen. Please do not edit by hand!"
  );
  appendPrintf("//");
  appendPrintf();

  writeOutputEnumValues(headerData);

  appendLine(`return 0;`);
  appendLine("}");

  await Deno.writeTextFile("codegen.c", output);

  const compileCommand = new Deno.Command("gcc", {
    args: ["-o", "codegen", "codegen.c"],
    stdin: "piped",
    stdout: "piped",
  }).spawn();

  const compileOutput = await compileCommand.output();

  if (!compileOutput.success) {
    console.error("Failed to compile C program.");
    return;
  }

  const codegenCommand = new Deno.Command("./codegen", {
    stdin: "piped",
    stdout: "piped",
  }).spawn();

  const codegenOutput = await codegenCommand.output();

  if (!codegenOutput.success) {
    console.error("Failed to execute C program.");
    return;
  }

  await Deno.writeTextFile(
    join([SRC_PATH, "SDL", "_metadata.ts"]),
    new TextDecoder().decode(codegenOutput.stdout)
  );
}

function writeOutputEnumValues(headerData: HeaderFileData): void {
  headerData.enums.sort((a, b) => a.name.localeCompare(b.name));

  for (const enumData of headerData.enums) {
    const format =
      enumData.specifier === "s" ? '"%s"' : `%${enumData.specifier}`;
    appendPrintf(
      `export const %s = ${format};`,
      `"${enumData.name}"`,
      enumData.name
    );
  }
}

async function parseHeaderFiles(): Promise<HeaderFileData> {
  const result = await exec(["pkg-config", "sdl3", "--cflags"], {
    captureOutput: true,
  });

  const includeDirectory = join([
    resolve(result.stdout.substring("-I".length).trimEnd()),
    "SDL3",
  ]);

  const headerFiles = await listFiles(includeDirectory, { extensions: ["h"] });

  const data: HeaderFileData = {
    enums: [],
  };

  for (const headerFile of headerFiles) {
    if (!EXCLUDE_HEADERS.includes(basename(headerFile))) {
      await parseHeaderFile(headerFile, data);
    }
  }

  return data;
}

async function parseHeaderFile(
  path: string,
  data: HeaderFileData
): Promise<void> {
  for await (let line of readTextFileLines(path)) {
    if (line.startsWith("#define SDL_") && !line.endsWith("_h_")) {
      line = line.substring("#define ".length);

      const constantOrMacro = extractConstantOrMacro(line);
      if (
        !constantOrMacro.isMacro &&
        constantOrMacro.name.toUpperCase() === constantOrMacro.name &&
        !EXCLUDE_ENUMS.includes(constantOrMacro.name) &&
        !constantOrMacro.name.startsWith("SDL_PLATFORM_") &&
        !data.enums.map((x) => x.name).includes(constantOrMacro.name)
      ) {
        let specifier: HeaderFileData["enums"][number]["specifier"] = "u";

        if (constantOrMacro.value.includes('"')) {
          specifier = "s";
        } else if (constantOrMacro.value.includes(".")) {
          specifier = "f";
        }

        if (constantOrMacro.name === "SDL_KMOD_ALT") {
          console.info(constantOrMacro);
        }

        data.enums.push({
          name: constantOrMacro.name,
          specifier,
        });
      }
    }
  }
}

function extractConstantOrMacro(line: string): {
  name: string;
  isMacro: boolean;
  value: string;
} {
  let parenDepth = 0;
  let isMacro = false;
  let index = 0;

  for (; index < line.length; index += 1) {
    if (line[index] === " ") {
      if (parenDepth === 0) {
        break;
      }
    } else if (line[index] === "(") {
      parenDepth += 1;
      isMacro = true;
    } else if (line[index] === ")") {
      parenDepth -= 1;
    }
  }

  const name = line.substring(0, index);
  let value = line.substring(index + 1).trim();

  // Remove comment if one exists.
  if (value.indexOf("/*") !== -1 && value.lastIndexOf("*/") !== -1) {
    value =
      value.substring(0, value.indexOf("/*")) +
      value.substring(value.lastIndexOf("*/") + "*/".length);

    value = value.trim();
  }

  return {
    name,
    isMacro,
    value,
  };
}

try {
  await main();
} catch (error) {
  console.error(error);
  exit(1);
}
